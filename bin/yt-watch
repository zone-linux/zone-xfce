#!/usr/bin/env bash

c_red="\033[1;31m"
c_green="\033[1;32m"
c_blue="\033[1;34m"
c_reset="\033[0m"
tmp_file="/tmp/yt-hist"
search_file="/tmp/yt-script-search"
rm -rf "$search_file"


formatPrint(){
    count=1
    while IFS="" read -r line || [ -n "$line" ];do
        if [ $((count % 2)) -eq 0 ];then
            printf "${c_blue}[$count]: $line\n"
        else
            printf "${c_green}[$count]: $line${c_reset}\n"
        fi
        count=$((count+1))
    done  < $1
}

die() { printf "$*" 1>&2 ; exit 1; }

notify() {
  local action="$1"
  local title="$2"
  
  notify-send -u normal \
              -t 5000 "$action:" "$title"
}

playVideo() {
  local link="$1"
  setsid -f mpv "$link" --loop 2>/dev/null 1>&2
}

searchQuery() {
  tput reset
  printf "${c_red}Search YouTube:${c_reset} "
  read -r query
  
  if [[ "$query" == "" ]]; then
    die "No query term specified.\n"
  fi
  
  query="${query// /+}"
  tput reset

  if ! command -v yt-dlp &> /dev/null; then
    die "yt-dlp is not installed\n"
  fi

  if ! command -v mpv &> /dev/null; then
    die "mpv is not installed\n"
  fi

  if [ -n "$1" ]; then
    search_length="$1"
  else
    search_length="5"
  fi

  printf "${c_red}Searching with yt-dlp.${c_reset} "
  yt-dlp --verbose -j "ytsearch$search_length:$query" > $tmp_file
  
  searchVideo
}

searchHistory() {
  if [[ ! -f "$tmp_file" ]]; then
    die "You don't have a recent search history\n"
  fi

  searchVideo
}

searchVideo() {
  tput reset

  printf "${c_red}Formatting output.${c_reset} "
  while IFS="" read -r line;do
	  uploader=$( echo $line | sed 's/.*"uploader": "\(.*\)", "uploader_id.*/\1/g')
	  title=$( echo $line | sed 's/.*"fulltitle": "\(.*\)", "epoch.*/\1/g')
	  url=$( echo $line | sed 's/.*"webpage_url": "\(.*\)", "categories.*/\1/g')
	  echo "${uploader} --> ${title} ${url}" >> $search_file
  done < $tmp_file

  tput reset
  formatPrint "$search_file"

  printf "\n${c_red}Enter Choice:${c_reset} "
  read -r choice
  [ "$choice" -eq "$choice" ] 2>/dev/null || die "${c_red}Invalid Number Entered.${c_reset}\n"
  [[ $(wc -l ${search_file} | awk '{print $1}') -lt $choice  ]] || [[ $choice -lt 0 ]] || [[ $choice -eq 0 ]] && die "${c_red}Invalid choice range.${c_reset}\n"
  
  video=$(awk -v choice="$choice" '{if(NR==choice) print $0}' "$search_file")
  videourl=$(echo "$video"|awk '{print $NF}')  
  format_title=$(echo "$video"|sed 's/^.*--> \(.*\) https:\/\/.*/\1/')

  notify "Playing Youtube Video" "$format_title" && playVideo "$videourl"
  tput reset
}

downloadVideo() {
  if ! command -v yt-dlp &> /dev/null; then
    die "yt-dlp is not installed\n"
  fi

  local id="$1"
  notify "Downloading Video" "$id"

  yt-dlp -f "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best" "$id"
}

downloadMp3() {
  if ! command -v yt-dlp &> /dev/null; then
    die "yt-dlp is not installed\n"
  fi

  local id="$1"
  notify "Converting To Mp3" "$id"

  yt-dlp --extract-audio --audio-format=mp3 --audio-quality=0 "$id"
}

_sigterm(){
  tput reset
  die 
}

trap _sigterm SIGTERM
trap _sigterm SIGINT


# Play youtube video link from clipboard
if [[ "$1" == "" ]]; then
  notify "Playing Video" "$(xclip -o)" && playVideo "$(xclip -o)"

# input youtube link
elif [[ "$1" == "-l" || "$1" == "--link" ]]; then
  notify "Playing Video" "$2" && playVideo "$2"

# Download youtube video on .mp4 format with the highest quality
elif [[ "$1" == "-dv" || "$1" == "--download-video" ]]; then
  downloadVideo "$2"

# Convert & Download youtube video on .mp3 format with the highest quality
elif [[ "$1" == "-dm" || "$1" == "--download-mp3" ]]; then
  downloadMp3 "$2"

# Search youtube videos
elif [[ "$1" == "-s" || "$1" == "--search" ]]; then
  searchQuery

# Search youtube videos with specifying the result length.
# The larger the value, the longer it takes.
elif [[ "$1" == "-sl" || "$1" == "--search-length" ]]; then
  searchQuery "$2"

# Uses recent results from recent search query. 
elif [[ "$1" == "-h" || "$1" == "--history" ]]; then
  searchHistory

# Stops the video from playing
elif [[ "$1" == "-k" || "$1" == "--kill" ]]; then
  pkill mpv

fi
