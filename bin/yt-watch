#!/usr/bin/env bash

c_red="\033[1;31m"
c_green="\033[1;32m"
c_blue="\033[1;34m"
c_reset="\033[0m"

api_file="${XDG_CONFIG_HOME:-$HOME/.config}/.yt-api"
tmp_file="/tmp/yt.json"
search_file="/tmp/yt-script-search"
queries_file="${XDG_CONFIG_HOME:-$HOME}/.yt-queries"


formatPrint(){
    count=1
    while IFS="" read -r line || [ -n "$line" ];do
        if [ $((count % 2)) -eq 0 ];then
            printf "${c_blue}[$count]: $line\n"
        else
            printf "${c_green}[$count]: $line${c_reset}\n"
        fi
        count=$((count+1))
    done  < $1
}

die() { printf "$*" 1>&2 ; exit 1; }

notify() {
    local action="$1"
    local title="$2"
  
    notify-send -u normal \
                -t 5000 "$action:" "$title"
}

playVideo() {
    local link="$1"
    setsid -f mpv "$link" --loop 2>/dev/null 1>&2
}

searchHistory() {
    if [[ ! -f "$search_file" ]]; then
        die "You don't have a recent search history\n"
    fi

    if [[ ! -f "$api_file" ]]; then
        searchVideo
    else
        api_key=$(cat "$api_file")
        searchVideoWithAPI
    fi
}


## Begin With API Functions
searchQueryWithAPI() {
    if ! command -v jq &> /dev/null; then
        die "jq is not installed\n"
    fi

    tput reset

    printf "${c_red}Search YouTube:${c_reset} "
    read -r query

    if [[ "$query" == "" ]]; then
        die "No query term specified\n"
    fi

    echo "$query" >> "$queries_file"

    query_fmt="${query// /+}"
    tput reset

    printf "${c_red}Searching ${c_blue}$query${c_red} with YouTube API.${c_reset} "
    urlstring="https://www.googleapis.com/youtube/v3/search?part=snippet&q=${query_fmt}&type=video&maxResults=20&key=${api_key}"
    curl -s "${urlstring}" | jq -r '.items[] | "\(.snippet.channelTitle) --> \(.snippet.title) https://youtu.be/\(.id.videoId)"' > "$search_file"

    searchVideoWithAPI
}

searchVideoWithAPI() {
    tput reset

    formatPrint "$search_file"

    printf "\n${c_red}Enter Choice:${c_reset} "
    read -r choice
    [ "$choice" -eq "$choice" ] 2>/dev/null || die "${c_red}Invalid Number Entered.${c_reset}\n"
    [[ $(wc -l ${search_file} | cut -d' ' -f1) -lt "$choice" ]] || [[ "$choice" -lt 0 ]] || [[ "$choice" -eq 0 ]] && die "${c_red}Invalid choice range.${c_reset}\n"
    
    video=$(awk -v choice="$choice" '{if(NR==choice) print $0}' ${search_file})
    videourl=$(printf "%s" "$video" | awk '{ print $NF }')
    videotitle=$(printf "%s" "$video" | sed 's/^[^-]*--> //g' | sed 's/ http.*//g')

    notify "Playing Video" "$videotitle" && playVideo "$videourl"
    tput reset
}
## End With API Functions


## Begin Without API Functions
searchQuery() {
    tput reset
    rm -rf "$search_file"

    printf "${c_red}Search YouTube:${c_reset} "
    read -r query
  
    if [[ "$query" == "" ]]; then
        die "No query term specified.\n"
    fi

    echo "$query" >> "$queries_file"

    query_fmt="${query// /+}"
    tput reset

  # Begin Checking for Dependencies
    if ! command -v yt-dlp &> /dev/null; then
        die "yt-dlp is not installed\n"
    fi

    if ! command -v mpv &> /dev/null; then
        die "mpv is not installed\n"
    fi
  # End Checking for Dependencies

    if [ -n "$1" ]; then
        search_length="$1"
    else
        search_length="5"
    fi

    printf "${c_red}Searching ${c_blue}$query${c_red} with yt-dlp.${c_reset} "
    yt-dlp --verbose -j "ytsearch$search_length:$query_fmt" > "$tmp_file"

    tput reset
    printf "${c_red}Formatting output.${c_reset} "
    while IFS="" read -r line;do
	    uploader=$( echo $line | sed 's/.*"uploader": "\(.*\)", "uploader_id.*/\1/g')
	    title=$( echo $line | sed 's/.*"fulltitle": "\(.*\)", "epoch.*/\1/g')
	    url=$( echo $line | sed 's/.*"webpage_url": "\(.*\)", "categories.*/\1/g')
	    echo "${uploader} --> ${title} ${url}" >> "$search_file"
    done < "$tmp_file"
  
    searchVideo
}

searchVideo() {
    tput reset

    formatPrint "$search_file"

    printf "\n${c_red}Enter Choice:${c_reset} "
    read -r choice
    [ "$choice" -eq "$choice" ] 2>/dev/null || die "${c_red}Invalid Number Entered.${c_reset}\n"
    [[ $(wc -l ${search_file} | awk '{print $1}') -lt "$choice" ]] || [[ "$choice" -lt 0 ]] || [[ "$choice" -eq 0 ]] && die "${c_red}Invalid choice range.${c_reset}\n"
  
    video=$(awk -v choice="$choice" '{if(NR==choice) print $0}' "$search_file")
    videourl=$(echo "$video"|awk '{print $NF}')  
    format_title=$(echo "$video"|sed 's/^.*--> \(.*\) https:\/\/.*/\1/')

    notify "Playing Youtube Video" "$format_title" && playVideo "$videourl"
    tput reset
}
## End Without API Functions


## Begin Download Functions
downloadVideo() {
    if ! command -v yt-dlp &> /dev/null; then
        die "yt-dlp is not installed\n"
    fi

    local id="$1"
    notify "Downloading Video" "$id"

    yt-dlp -f "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best" "$id"
}

downloadMp3() {
    if ! command -v yt-dlp &> /dev/null; then
        die "yt-dlp is not installed\n"
    fi

    local id="$1"
    notify "Converting To Mp3" "$id"

    yt-dlp --extract-audio --audio-format=mp3 --audio-quality=0 "$id"
}
## End Download Functions


_sigterm(){
    tput reset
    die 
}

trap _sigterm SIGTERM
trap _sigterm SIGINT

helpScreen() {
  echo "
  Usage: yt-watch [OPTION]

  --help                        This help screen
  None                          Uses the YouTube link from your clipboard.
  -l, --link                    Play YouTube video from link. (--link 'https://www.youtube.com/watch?v=dQw4w9WgXcQ')
  -dv, --download-mp4           Download YouTube video & converts it to '.mp4' format. (--download-video 'https://www.youtube.com/watch?v=dQw4w9WgXcQ')
  -dm, --download-mp3           Downloads & converts Video to '.mp3' format. (--download-mp3 'https://www.youtube.com/watch?v=dQw4w9WgXcQ')
  -s, --search                  Lets you enter a search query and uses youtube API/yt-dlp.
  -sl, --search-length          Customize the result length of your search query. (--search-length 20)
  -h, --history                 Lists out the query results of your latest search.
  -k, --kill                    Kills mpv
  "
}

# Play youtube video link from clipboard
if [[ "$1" == "" ]]; then
    notify "Playing Video" "$(xclip -o)" && playVideo "$(xclip -o)"

# input youtube link
elif [[ "$1" == "-l" || "$1" == "--link" ]]; then
    notify "Playing Video" "$2" && playVideo "$2"

# Download youtube video on .mp4 format with the highest quality
elif [[ "$1" == "-dv" || "$1" == "--download-mp4" ]]; then
    downloadVideo "$2"

# Convert & Download youtube video on .mp3 format with the highest quality
elif [[ "$1" == "-dm" || "$1" == "--download-mp3" ]]; then
    downloadMp3 "$2"

# Search youtube videos
elif [[ "$1" == "-s" || "$1" == "--search" ]]; then
    if [[ ! -f "$api_file" ]]; then
        searchQuery
    else
        api_key=$(cat "$api_file")
        searchQueryWithAPI
    fi

# Search youtube videos with specifying the result length.
# The larger the value, the longer it takes.
elif [[ "$1" == "-sl" || "$1" == "--search-length" ]]; then
    searchQuery "$2"

# Uses recent results from recent search query. 
elif [[ "$1" == "-h" || "$1" == "--history" ]]; then
    searchHistory

# Stops the video from playing
elif [[ "$1" == "-k" || "$1" == "--kill" ]]; then
    pkill mpv

elif [[ "$1" == "--help" ]]; then
    helpScreen
fi
