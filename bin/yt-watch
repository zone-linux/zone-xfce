#!/usr/bin/env bash

api_key="AIzaSyA59XW71qBIAR0ViapQd8sZ_OjqnrxSsaU"

c_red="\033[1;31m"
c_blue="\033[1;34m"
c_green="\033[1;32m"
c_reset="\033[0m"
tmp_file="/tmp/yt-hist"


formatPrint(){
    count=1
    while IFS="" read -r line || [ -n "$line" ];do
        if [ $((count % 2)) -eq 0 ];then
            printf "${c_blue}[$count]: $line\n"
        else
            printf "${c_green}[$count]: $line${c_reset}\n"
        fi
        count=$((count+1))
    done  < $1
}

die() { printf "$*" 1>&2 ; exit 1; }

notify() {
  local action="$1"
  local title="$2"
  
  notify-send -u normal \
              -t 5000 "$action: $title"
}

playVideo() {
  local link="$1"
  setsid -f mpv "$link" --loop 2>/dev/null 1>&2
}

searchVideo() {
  if ! command -v jq &> /dev/null; then
    die "jq is not installed\n"
  fi

  tput reset

  printf "${c_red}Search YouTube Video:${c_reset} "
  read -r query

  if [[ $query == "" ]]; then
    die "No query term specified\n"
  fi

  query="${query// /+}"
  tput reset

  urlstring="https://www.googleapis.com/youtube/v3/search?part=snippet&q=${query}&type=video&maxResults=20&key=${api_key}"
  curl -s "${urlstring}" | jq -r '.items[] | "\(.snippet.channelTitle) --> \(.snippet.title) https://youtu.be/\(.id.videoId)"' > $tmp_file

  formatPrint $tmp_file

  printf "\n${c_red}Enter Choice:${c_reset} "
    read -r choice
    [ "$choice" -eq "$choice" ] 2>/dev/null || die "${c_red}Invalid Number Entered.${c_reset}\n"
    [[ $(wc -l ${tmp_file} | cut -d' ' -f1) -lt $choice  ]] || [[ $choice -lt 0 ]] || [[ $choice -eq 0 ]] && die "${c_red}Invalid choice range.${c_reset}\n"
    
    videourl=$(awk -v choice="$choice" '{if(NR==choice) print $0}' ${tmp_file}| awk '{print $NF}')
    videotitle=$(awk -v choice="$choice" '{if(NR==choice) print $0}' ${tmp_file} | sed 's/ https:.*//g')
    
    notify "Playing Video" "$videotitle" && playVideo "${videourl}"
    tput reset
}

searchHistory() {
  if [[ ! -f "$tmp_file" ]]; then
    die "You don't have a recent search history\n"
  fi

  tput reset
  formatPrint $tmp_file

  printf "\n${c_red}Enter Choice:${c_reset} "
    read -r choice
    [ "$choice" -eq "$choice" ] 2>/dev/null || die "${c_red}Invalid Number Entered.${c_reset}\n"
    [[ $(wc -l ${tmp_file} | cut -d' ' -f1) -lt $choice  ]] || [[ $choice -lt 0 ]] || [[ $choice -eq 0 ]] && die "${c_red}Invalid choice range.${c_reset}\n"
    
    videourl=$(awk -v choice="$choice" '{if(NR==choice) print $0}' ${tmp_file}| awk '{print $NF}')
    videotitle=$(awk -v choice="$choice" '{if(NR==choice) print $0}' ${tmp_file} | sed 's/ https:.*//g')
    
    notify "Playing Video" "$videotitle" && playVideo "${videourl}"
    tput reset
}

downloadVideo() {
  if ! command -v yt-dlp &> /dev/null; then
    die "yt-dlp is not installed\n"
  fi

  local id="$1"
  notify "Downloading Video" "$id"

  yt-dlp -f "bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best" "$id"
}

downloadMp3() {
  if ! command -v yt-dlp &> /dev/null; then
    die "yt-dlp is not installed\n"
  fi

  local id="$1"
  notify "Converting To Mp3" "$id"

  yt-dlp --extract-audio --audio-format=mp3 --audio-quality=0 "$id"
}

if [[ "$1" == "" ]]; then
  notify "Playing Video" "$(xclip -o)" && playVideo "$(xclip -o)"
elif [[ "$1" == "-l" || "$1" == "--link" ]]; then
  notify "Playing Video" "$2" && playVideo "$2"
elif [[ "$1" == "-s" || "$1" == "--search" ]]; then
  searchVideo
elif [[ "$1" == "-h" || "$1" == "--history" ]]; then
  searchHistory
elif [[ "$1" == "-dv" || "$1" == "--download-video" ]]; then
  downloadVideo "$2"
elif [[ "$1" == "-dm" || "$1" == "--download-mp3" ]]; then
  downloadMp3 "$2"
fi
